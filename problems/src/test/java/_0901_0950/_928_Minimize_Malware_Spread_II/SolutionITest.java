package _0901_0950._928_Minimize_Malware_Spread_II;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @author zhixi
 * @version 1.0 on 9/21/2020
 */
class SolutionITest {

  @ParameterizedTest
  @MethodSource("solutionProvider")
  void testOnlineCase1(Solution solution) {
    final int graph[][] = {
        {1, 1, 0},
        {1, 1, 0},
        {0, 0, 1}}, initial[] = {0, 1},
        expected = 0, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);
  }

  @ParameterizedTest
  @MethodSource("solutionProvider")
  void testOnlineCase2(Solution solution) {
    final int graph[][] = {
        {1, 1, 0}, {1, 1, 1}, {0, 1, 1}
    }, initial[] = {0, 1},
        expected = 1, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);
  }

  @ParameterizedTest
  @MethodSource("solutionProvider")
  void testOnlineCase3(Solution solution) {
    final int graph[][] = {
        {1, 1, 0, 0}, {1, 1, 1, 0}, {0, 1, 1, 1}, {0, 0, 1, 1}}, initial[] = {0, 1},
        expected = 1, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);
  }

  @ParameterizedTest
  @MethodSource("solutionProvider")
  void testOnlineCase5(Solution solution) {
    final int graph[][] = {
        {1, 1, 0, 1, 0, 0, 0},
        {1, 1, 1, 1, 1, 0, 0},
        {0, 1, 1, 0, 0, 0, 0},
        {1, 1, 0, 1, 1, 0, 0},
        {0, 1, 0, 1, 1, 0, 0},
        {0, 0, 0, 0, 0, 1, 1},
        {0, 0, 0, 0, 0, 1, 1}
    }, initial[] = {0, 2, 5},
        expected = 5, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);
  }

  static Stream<Solution> solutionProvider() {
    return Stream.of(
        new BfsSolution()
    );
  }
}