package _0901_0950._924_Minimize_Malware_Spread;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @author jacka
 * @version 1.0 on 9/20/2020
 */
class SolutionTest {

  @ParameterizedTest
  @MethodSource("solutionStream")
  void testOnlineCase1(Solution solution) {
    final int graph[][] = {{1, 1, 0}, {1, 1, 0}, {0, 0, 1}}, initial[] = {0, 1},
        expected = 0, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);

  }

  @ParameterizedTest
  @MethodSource("solutionStream")
  void testOnlineCase2(Solution solution) {
    final int graph[][] = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, initial[] = {0, 2},
        expected = 0, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);
  }

  @ParameterizedTest
  @MethodSource("solutionStream")
  void testOnlineCase3(Solution solution) {
    final int graph[][] = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}, initial[] = {1, 2},
        expected = 1, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);
  }

  @ParameterizedTest
  @MethodSource("solutionStream")
  void testOnlineCase4(Solution solution) {

    final int graph[][] = {
        {1, 0, 0, 0, 0, 0},
        {0, 1, 0, 0, 0, 0},
        {0, 0, 1, 0, 0, 0},
        {0, 0, 0, 1, 1, 0},
        {0, 0, 0, 1, 1, 0},
        {0, 0, 0, 0, 0, 1}
    }, initial[] = {5, 0},
        expected = 0, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);
  }

  @ParameterizedTest
  @MethodSource("solutionStream")
  void testOnlineCase5(Solution solution) {
    final int graph[][] = {
        {1, 1, 0},
        {1, 1, 0},
        {0, 0, 1}
    }, initial[] = {0, 1, 2},
        expected = 2, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);
  }

  @ParameterizedTest
  @MethodSource("solutionStream")
  void testOnlineCase6(Solution solution) {
    final int graph[][] = {
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 1},
        {0, 0, 1, 1}
    }, initial[] = {3, 1},
        expected = 3, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);
  }

  @ParameterizedTest
  @MethodSource("solutionStream")
  void testOnlineCase7(Solution solution) {
    final int graph[][] = {
        //0,1, 2, 3, 4, 5, 6, 7
        {1, 0, 0, 0, 1, 0, 0, 0}, // 0
        {0, 1, 1, 0, 0, 1, 0, 0}, // 1
        {0, 1, 1, 0, 1, 0, 0, 0}, // 2
        {0, 0, 0, 1, 1, 0, 0, 0}, // 3
        {1, 0, 1, 1, 1, 0, 0, 1}, // 4
        {0, 1, 0, 0, 0, 1, 0, 0}, // 5
        {0, 0, 0, 0, 0, 0, 1, 1}, // 6
        {0, 0, 0, 0, 1, 0, 1, 1}  // 7
    }, initial[] = {7, 2},
        expected = 2, actual = solution.minMalwareSpread(graph, initial);
    assertEquals(expected, actual);
  }

  static Stream<Solution> solutionStream() {
    return Stream.of(
        new DfsSolution(),
        new UnionFindSolution()
    );
  }
}