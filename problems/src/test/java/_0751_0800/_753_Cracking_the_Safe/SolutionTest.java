package _0751_0800._753_Cracking_the_Safe;

import org.junit.Before;
import org.junit.Test;

import java.util.Set;

import static org.junit.Assert.assertTrue;

/**
 * @author jacka
 * @version 1.0 on 1/6/2018.
 */
public class SolutionTest {
  private Solution solution;

  @Before
  public void setUp() throws Exception {
    solution = new DfsSolutionII();
  }

  @Test
  public void testOnlineCase1() throws Exception {
    final Set<String> expected = Set.of("01", "10");
    final String actual = solution.crackSafe(1, 2);
    assertTrue(expected.contains(actual));
  }

  @Test
  public void testOnlineCase2() throws Exception {
    final Set<String> expected = Set.of("00110", "01100", "10011", "11001");
    final String actual = solution.crackSafe(2, 2);
    assertTrue(expected.contains(actual));
  }

  @Test
  public void testFailedCase1() throws Exception {
    final Set<String> expected = Set.of

    final String actual = solution.crackSafe(4, 8);
    assertTrue(expected.contains(actual));
  }
}
