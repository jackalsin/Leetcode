package _0901_0950._924_Minimize_Malware_Spread;

import java.util.Arrays;

/**
 * @author zhixi
 * @version 1.0 on 9/21/2020
 */
public final class UnionFindSolution implements Solution {
  public int minMalwareSpread(int[][] graph, int[] initial) {
    final int n = graph.length;
    final UnionFind uf = new UnionFind(n);
    final int[] malwareCountIfRoot = new int[n];
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        if (graph[i][j] == 1) {
          uf.union(i, j);
        }
      }
    }
    for (int i : initial) {
      malwareCountIfRoot[uf.root(i)]++;
    }

    // when comparing under this case:
    // there are the following possibilities:
    // 1) there is at least 1 union where malware is 1
    // 2) removing any of the malware won't reduce the infected zones, so we pick the smallest one.
    int result = initial[0],
        max = malwareCountIfRoot[uf.root(result)] == 1 ? uf.sizes[uf.root(result)] : 0;
    for (int i = 1; i < initial.length; ++i) {
      final int initialRoot = uf.root(initial[i]);
      final int curSize = malwareCountIfRoot[initialRoot] == 1 ? uf.sizes[initialRoot] : 0;
      if (curSize > max || (curSize == max && result > initial[i])) {
        result = initial[i];
        max = curSize;
      }
    }
    return result;
  }

  private static final class UnionFind {
    private final int[] roots, sizes;

    private UnionFind(final int n) {
      roots = new int[n];
      for (int i = 0; i < n; ++i) {
        roots[i] = i;
      }
      sizes = new int[n];
      Arrays.fill(sizes, 1);
    }

    private int root(int p) {
      while (p != roots[p]) {
        roots[p] = roots[roots[p]];
        p = roots[p];
      }
      return p;
    }

    private void union(final int p, final int q) {
      final int rootP = root(p), rootQ = root(q),
          sizeP = sizes[rootP], sizeQ = sizes[rootQ];
      if (rootP == rootQ) return;
      if (sizeP < sizeQ) {
        roots[rootP] = rootQ;
        sizes[rootQ] += sizes[rootP];
      } else {
        roots[rootQ] = rootP;
        sizes[rootP] += sizes[rootQ];
      }
    }
  }
}
